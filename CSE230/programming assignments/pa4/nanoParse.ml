type token =
  | Num of (int)
  | Id of (string)
  | TRUE
  | FALSE
  | EOF
  | LET
  | REC
  | EQ
  | IN
  | FUN
  | ARROW
  | IF
  | THEN
  | ELSE
  | PLUS
  | MINUS
  | MUL
  | DIV
  | LT
  | LE
  | NE
  | AND
  | OR
  | LPAREN
  | RPAREN
  | LBRAC
  | RBRAC
  | SEMI
  | COLONCOLON

open Parsing;;
let _ = parse_error;;
# 2 "nanoParse.mly"
(* See this for a tutorial on ocamlyacc 
 * http://plus.kaist.ac.kr/~shoh/ocaml/ocamllex-ocamlyacc/ocamlyacc-tutorial/ *)
open Nano 

let rec expandList = function
  | [] -> NilExpr
  | h::t -> Bin (h, Cons, expandList t)

# 44 "nanoParse.ml"
let yytransl_const = [|
  259 (* TRUE *);
  260 (* FALSE *);
    0 (* EOF *);
  261 (* LET *);
  262 (* REC *);
  263 (* EQ *);
  264 (* IN *);
  265 (* FUN *);
  266 (* ARROW *);
  267 (* IF *);
  268 (* THEN *);
  269 (* ELSE *);
  270 (* PLUS *);
  271 (* MINUS *);
  272 (* MUL *);
  273 (* DIV *);
  274 (* LT *);
  275 (* LE *);
  276 (* NE *);
  277 (* AND *);
  278 (* OR *);
  279 (* LPAREN *);
  280 (* RPAREN *);
  281 (* LBRAC *);
  282 (* RBRAC *);
  283 (* SEMI *);
  284 (* COLONCOLON *);
    0|]

let yytransl_block = [|
  257 (* Num *);
  258 (* Id *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\002\000\002\000\002\000\003\000\003\000\
\004\000\004\000\005\000\005\000\005\000\005\000\005\000\006\000\
\006\000\007\000\007\000\007\000\008\000\008\000\008\000\009\000\
\009\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\011\000\011\000\000\000"

let yylen = "\002\000\
\001\000\006\000\007\000\004\000\006\000\001\000\003\000\001\000\
\003\000\001\000\003\000\003\000\003\000\003\000\001\000\003\000\
\001\000\003\000\003\000\001\000\003\000\003\000\001\000\002\000\
\001\000\001\000\001\000\001\000\001\000\003\000\002\000\003\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\026\000\029\000\027\000\028\000\000\000\000\000\
\000\000\000\000\000\000\035\000\001\000\000\000\000\000\000\000\
\015\000\000\000\000\000\000\000\025\000\000\000\000\000\000\000\
\000\000\000\000\031\000\033\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\024\000\000\000\000\000\000\000\000\000\030\000\032\000\000\000\
\000\000\000\000\011\000\013\000\014\000\012\000\000\000\000\000\
\016\000\000\000\000\000\000\000\000\000\004\000\000\000\034\000\
\000\000\000\000\000\000\002\000\000\000\005\000\003\000"

let yydgoto = "\002\000\
\012\000\013\000\014\000\015\000\016\000\017\000\018\000\019\000\
\020\000\021\000\029\000"

let yysindex = "\255\255\
\046\255\000\000\000\000\000\000\000\000\000\000\011\255\013\255\
\046\255\046\255\005\255\000\000\000\000\000\255\003\255\045\255\
\000\000\253\254\010\255\017\255\000\000\022\255\032\255\026\255\
\027\255\029\255\000\000\000\000\006\255\017\255\017\255\017\255\
\017\255\017\255\017\255\017\255\017\255\017\255\017\255\017\255\
\000\000\046\255\039\255\046\255\046\255\000\000\000\000\046\255\
\003\255\045\255\000\000\000\000\000\000\000\000\010\255\010\255\
\000\000\017\255\017\255\048\255\046\255\000\000\053\255\000\000\
\046\255\051\255\046\255\000\000\046\255\000\000\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\197\000\174\000\150\000\
\000\000\133\000\067\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\180\000\157\000\000\000\000\000\000\000\000\000\089\000\111\000\
\000\000\023\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\249\255\000\000\000\000\031\000\039\000\040\000\000\000\043\000\
\037\000\241\255\000\000"

let yytablesize = 480
let yytable = "\001\000\
\023\000\025\000\026\000\028\000\041\000\003\000\004\000\005\000\
\006\000\007\000\036\000\037\000\022\000\008\000\024\000\009\000\
\023\000\003\000\004\000\005\000\006\000\030\000\021\000\031\000\
\038\000\039\000\040\000\010\000\042\000\011\000\027\000\047\000\
\048\000\043\000\060\000\044\000\062\000\063\000\045\000\010\000\
\064\000\011\000\041\000\041\000\022\000\061\000\003\000\004\000\
\005\000\006\000\007\000\032\000\046\000\066\000\008\000\065\000\
\009\000\068\000\069\000\070\000\049\000\071\000\033\000\034\000\
\035\000\067\000\020\000\000\000\010\000\050\000\011\000\051\000\
\052\000\053\000\054\000\058\000\059\000\057\000\055\000\056\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\019\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\
\000\000\000\000\000\000\000\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\008\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\023\000\
\023\000\000\000\000\000\000\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\000\000\
\023\000\000\000\023\000\023\000\023\000\021\000\021\000\000\000\
\000\000\000\000\021\000\021\000\021\000\021\000\021\000\021\000\
\021\000\021\000\021\000\021\000\021\000\000\000\021\000\000\000\
\021\000\021\000\021\000\022\000\022\000\000\000\000\000\000\000\
\022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
\022\000\022\000\022\000\000\000\022\000\000\000\022\000\022\000\
\022\000\020\000\020\000\000\000\000\000\000\000\020\000\020\000\
\020\000\020\000\000\000\000\000\020\000\020\000\020\000\020\000\
\020\000\000\000\020\000\000\000\020\000\020\000\020\000\018\000\
\018\000\000\000\000\000\000\000\018\000\018\000\018\000\018\000\
\000\000\000\000\018\000\018\000\018\000\018\000\018\000\000\000\
\018\000\000\000\018\000\018\000\018\000\019\000\019\000\000\000\
\000\000\000\000\019\000\019\000\019\000\019\000\000\000\000\000\
\019\000\019\000\019\000\019\000\019\000\000\000\019\000\000\000\
\019\000\019\000\019\000\017\000\017\000\000\000\000\000\000\000\
\017\000\017\000\000\000\000\000\000\000\000\000\017\000\017\000\
\017\000\017\000\017\000\000\000\017\000\010\000\017\000\017\000\
\000\000\010\000\010\000\000\000\009\000\000\000\000\000\000\000\
\009\000\009\000\010\000\010\000\000\000\010\000\000\000\010\000\
\010\000\009\000\009\000\000\000\009\000\008\000\009\000\009\000\
\000\000\008\000\008\000\007\000\000\000\000\000\000\000\007\000\
\007\000\000\000\000\000\008\000\000\000\008\000\000\000\008\000\
\008\000\007\000\000\000\007\000\006\000\007\000\007\000\000\000\
\006\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\006\000\000\000\006\000\006\000"

let yycheck = "\001\000\
\000\000\009\000\010\000\011\000\020\000\001\001\002\001\003\001\
\004\001\005\001\014\001\015\001\002\001\009\001\002\001\011\001\
\006\001\001\001\002\001\003\001\004\001\022\001\000\000\021\001\
\028\001\016\001\017\001\023\001\007\001\025\001\026\001\026\001\
\027\001\002\001\042\000\010\001\044\000\045\000\012\001\023\001\
\048\000\025\001\058\000\059\000\000\000\007\001\001\001\002\001\
\003\001\004\001\005\001\007\001\024\001\061\000\009\001\008\001\
\011\001\065\000\008\001\067\000\030\000\069\000\018\001\019\001\
\020\001\013\001\000\000\255\255\023\001\031\000\025\001\032\000\
\033\000\034\000\035\000\039\000\040\000\038\000\036\000\037\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
\255\255\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\007\001\
\008\001\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\018\001\019\001\020\001\021\001\022\001\255\255\
\024\001\255\255\026\001\027\001\028\001\007\001\008\001\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\018\001\019\001\020\001\021\001\022\001\255\255\024\001\255\255\
\026\001\027\001\028\001\007\001\008\001\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\018\001\019\001\
\020\001\021\001\022\001\255\255\024\001\255\255\026\001\027\001\
\028\001\007\001\008\001\255\255\255\255\255\255\012\001\013\001\
\014\001\015\001\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\255\255\024\001\255\255\026\001\027\001\028\001\007\001\
\008\001\255\255\255\255\255\255\012\001\013\001\014\001\015\001\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\255\255\
\024\001\255\255\026\001\027\001\028\001\007\001\008\001\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\255\255\024\001\255\255\
\026\001\027\001\028\001\007\001\008\001\255\255\255\255\255\255\
\012\001\013\001\255\255\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\255\255\024\001\008\001\026\001\027\001\
\255\255\012\001\013\001\255\255\008\001\255\255\255\255\255\255\
\012\001\013\001\021\001\022\001\255\255\024\001\255\255\026\001\
\027\001\021\001\022\001\255\255\024\001\008\001\026\001\027\001\
\255\255\012\001\013\001\008\001\255\255\255\255\255\255\012\001\
\013\001\255\255\255\255\022\001\255\255\024\001\255\255\026\001\
\027\001\022\001\255\255\024\001\008\001\026\001\027\001\255\255\
\012\001\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\024\001\255\255\026\001\027\001"

let yynames_const = "\
  TRUE\000\
  FALSE\000\
  EOF\000\
  LET\000\
  REC\000\
  EQ\000\
  IN\000\
  FUN\000\
  ARROW\000\
  IF\000\
  THEN\000\
  ELSE\000\
  PLUS\000\
  MINUS\000\
  MUL\000\
  DIV\000\
  LT\000\
  LE\000\
  NE\000\
  AND\000\
  OR\000\
  LPAREN\000\
  RPAREN\000\
  LBRAC\000\
  RBRAC\000\
  SEMI\000\
  COLONCOLON\000\
  "

let yynames_block = "\
  Num\000\
  Id\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp8) in
    Obj.repr(
# 24 "nanoParse.mly"
                                       ( _1 )
# 302 "nanoParse.ml"
               : Nano.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 26 "nanoParse.mly"
                                       ( Let(_2,_4,_6) )
# 311 "nanoParse.ml"
               : 'exp8))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 27 "nanoParse.mly"
                                       ( Letrec(_3,_5,_7) )
# 320 "nanoParse.ml"
               : 'exp8))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 28 "nanoParse.mly"
                                       ( Fun(_2,_4) )
# 328 "nanoParse.ml"
               : 'exp8))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Nano.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Nano.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 29 "nanoParse.mly"
                                       ( If(_2,_4,_6) )
# 337 "nanoParse.ml"
               : 'exp8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp7) in
    Obj.repr(
# 30 "nanoParse.mly"
                                       ( _1 )
# 344 "nanoParse.ml"
               : 'exp8))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp7) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp6) in
    Obj.repr(
# 32 "nanoParse.mly"
                                       ( Bin(_1,Or,_3) )
# 352 "nanoParse.ml"
               : 'exp7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp6) in
    Obj.repr(
# 33 "nanoParse.mly"
                                       ( _1 )
# 359 "nanoParse.ml"
               : 'exp7))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp6) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp5) in
    Obj.repr(
# 35 "nanoParse.mly"
                                       ( Bin(_1,And,_3) )
# 367 "nanoParse.ml"
               : 'exp6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp5) in
    Obj.repr(
# 36 "nanoParse.mly"
                                       ( _1 )
# 374 "nanoParse.ml"
               : 'exp6))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp5) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp54) in
    Obj.repr(
# 38 "nanoParse.mly"
                                        ( Bin(_1,Eq,_3) )
# 382 "nanoParse.ml"
               : 'exp5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp5) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp54) in
    Obj.repr(
# 39 "nanoParse.mly"
                                        ( Bin(_1,Ne,_3) )
# 390 "nanoParse.ml"
               : 'exp5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp5) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp54) in
    Obj.repr(
# 40 "nanoParse.mly"
                                        ( Bin(_1,Lt,_3) )
# 398 "nanoParse.ml"
               : 'exp5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp5) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp54) in
    Obj.repr(
# 41 "nanoParse.mly"
                                        ( Bin(_1,Le,_3) )
# 406 "nanoParse.ml"
               : 'exp5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp54) in
    Obj.repr(
# 42 "nanoParse.mly"
                                       ( _1 )
# 413 "nanoParse.ml"
               : 'exp5))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp4) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp54) in
    Obj.repr(
# 44 "nanoParse.mly"
                                       ( Bin(_1,Cons,_3) )
# 421 "nanoParse.ml"
               : 'exp54))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp4) in
    Obj.repr(
# 45 "nanoParse.mly"
                                       ( _1 )
# 428 "nanoParse.ml"
               : 'exp54))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp4) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp3) in
    Obj.repr(
# 47 "nanoParse.mly"
                                       ( Bin(_1,Plus,_3) )
# 436 "nanoParse.ml"
               : 'exp4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp4) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp3) in
    Obj.repr(
# 48 "nanoParse.mly"
                                       ( Bin(_1,Minus,_3) )
# 444 "nanoParse.ml"
               : 'exp4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp3) in
    Obj.repr(
# 49 "nanoParse.mly"
                                       ( _1 )
# 451 "nanoParse.ml"
               : 'exp4))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp3) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 51 "nanoParse.mly"
                                       ( Bin(_1,Mul,_3) )
# 459 "nanoParse.ml"
               : 'exp3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'exp3) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 52 "nanoParse.mly"
                                       ( Bin(_1,Div,_3) )
# 467 "nanoParse.ml"
               : 'exp3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp2) in
    Obj.repr(
# 53 "nanoParse.mly"
                                       ( _1 )
# 474 "nanoParse.ml"
               : 'exp3))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'exp2) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'exp1) in
    Obj.repr(
# 55 "nanoParse.mly"
                                       ( App(_1,_2) )
# 482 "nanoParse.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'exp1) in
    Obj.repr(
# 56 "nanoParse.mly"
                                       ( _1 )
# 489 "nanoParse.ml"
               : 'exp2))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 58 "nanoParse.mly"
                                       ( Const _1 )
# 496 "nanoParse.ml"
               : 'exp1))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "nanoParse.mly"
                                       ( True )
# 502 "nanoParse.ml"
               : 'exp1))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "nanoParse.mly"
                                       ( False )
# 508 "nanoParse.ml"
               : 'exp1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 61 "nanoParse.mly"
                                       ( Var _1 )
# 515 "nanoParse.ml"
               : 'exp1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Nano.expr) in
    Obj.repr(
# 62 "nanoParse.mly"
                                       ( _2 )
# 522 "nanoParse.ml"
               : 'exp1))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "nanoParse.mly"
                                       ( NilExpr )
# 528 "nanoParse.ml"
               : 'exp1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expseq) in
    Obj.repr(
# 64 "nanoParse.mly"
                                       ( expandList _2 )
# 535 "nanoParse.ml"
               : 'exp1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 66 "nanoParse.mly"
                                       ( [_1] )
# 542 "nanoParse.ml"
               : 'expseq))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expseq) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Nano.expr) in
    Obj.repr(
# 67 "nanoParse.mly"
                                       ( _1 @ [_3] )
# 550 "nanoParse.ml"
               : 'expseq))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Nano.expr)
